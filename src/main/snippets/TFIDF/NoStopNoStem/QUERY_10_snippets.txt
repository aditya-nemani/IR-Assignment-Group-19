TFIDF_NoStopNoStem

Query
pascal languages; languages for pascal computation

Top 100 Results (219 millisecs)


DocID: CACM-2316

of [languages] are given.  the major [languages] are listed  
of programming [languages]  = higher level [languages] .  
programming [languages] higher level [languages]  


DocID: CACM-1366

technique and comparison of languages  
of some computer simulation languages  
languages and packages can be improved.  


DocID: CACM-1098

a comparison of list-processing computer languages  
four [languages] under consideration are detailed:  
languages for use in particular problem applications,  


DocID: CACM-2705

programming [languages] natural [languages] and mathematics  
artificial auxiliary [languages] literature, style,  
of the history of artificial, auxiliary [languages] it  


DocID: CACM-3077

forms, functional forms, programming [languages]  
conventional programming [languages] are growing  
state transition occurs per major [computation]  


DocID: CACM-1703

reliable identification of programming languages  
programming [languages] standards which accommodate  
standardization, programming [languages] trac t-64  


DocID: CACM-2603

languages and deterministic languages  
context free [languages]  
reducing transition [languages] syntax controlled  


DocID: CACM-2645

programming [languages] syntax-directed translation,  
two [languages] for estimating program efficiency  
two [languages] enabling their users to estimate  


DocID: CACM-2317

languages, operating systems, programming  
programming systems and [languages] 1965-1975  
and cobol remain the [languages] in which most  


DocID: CACM-2921

parsing, programming [languages] language generation,  
describe the syntax of programming [languages] more  
grammars, which resemble [pascal] syntax diagrams.  formally,  


DocID: CACM-2406

"generalized" data definition [languages] are also  
data definition [languages] which describe both the logical  
most data definition [languages] concentrate on the declaration  


DocID: CACM-3150

beyond programming languages  
programming, programming [languages] programming systems, systems development  
shortcomings of programming [languages] as they now exist,  


DocID: CACM-2470

description [languages] models of computation  
languages, data types, modes, axioms, correctness,  
into [languages] through the mechanism of singleton  


DocID: CACM-2931

logic and programming languages  
logic, programming [languages] automata, denotational  
computability theory.  programming [languages] offer  


DocID: CACM-2710

languages, relational completeness  
database, data sublanguages, relations, query [languages]  
languages based on the relational calculus.  facilities  


DocID: CACM-2254

dynamic partitioning for array languages  
the value of partitioning for array [languages]  
detail to be of value in the design of other array [languages]  


DocID: CACM-1470

the structure of programming languages  
of programming [languages] toward one which  
list processing [languages] illustrate the forms  


DocID: CACM-3105

programming [languages] access control, data types,  
paper shows how to extend programming languages  
languages that support the notion of abstract data  


DocID: CACM-3148

program of development in advanced programming [languages] and relations  
languages.  based on primitive notions of module, message,  
of particular [languages] and machines.  it appears to be useful for  


DocID: CACM-1135

in the [languages] as opposed to emphasizing  
of other business-oriented [languages] and fully meets  
the requirements set by codasyl for such [languages]  


DocID: CACM-1852

programming [languages] implementation techniques  
programming [languages] whose implementation is based  
bootstrapping, of processors for programming [languages] is  


DocID: CACM-1485

the structure of programming languages  
with the suggestion that programming languages  
frequently from list processing [languages] illustrate  


DocID: CACM-2265

most current programming [languages] treat computation  
programming [languages] syntax, semantics, compiler  


DocID: CACM-1459

requirements for real-time languages  
real-time [languages] have different requirements  
from other programming [languages] because of  


DocID: CACM-2305

higher programming [languages] programming,  
of today's programming languages  
in today's programming [languages]  the investigation  


DocID: CACM-1678

science program, automata, formal [languages]  
automata, formal [languages] abstract switching,  
describe as automata, formal [languages] abstract  


DocID: CACM-1350

algorithm for arbitrary context-free [languages] is compared  
gs can be constructed, which generates the same languages  


DocID: CACM-2956

data types, generic procedures, programming languages  
some ideas on data types in high-level languages  


DocID: CACM-1496

a formal semantics for computer languages  
a large class of computer [languages]  this meta-language  


DocID: CACM-2314

programming [languages] interactive systems, control  
list processing, programming [languages] design of  


DocID: CACM-2709

goto statements, language design, pascal  


DocID: CACM-2942

pattern implementation, algorithms in pascal  


DocID: CACM-1491

a method for defining programming [languages] is  
certain decidable classes of [languages] their unambiguity  


DocID: CACM-2650

order-n correction for regular languages  
error correction, regular [languages] regular events,  


DocID: CACM-2112

expression, context-free [languages] translation, recognizers,  
context-free [languages]  a formal procedure is given for deriving from  


DocID: CACM-2873

interactive programming, problem oriented [languages]  
user oriented [languages]  lg has been specifically designed  


DocID: CACM-2081

matrix sequences, programming [languages]  
as to find the forms best suited for [computation]  these forms are  


DocID: CACM-1411

comparison of several algorithms for computation  
several algorithms for [computation] of basic  
due to an accumulated error term, and a recursive computation  


DocID: CACM-2717

utility program, programming [languages] nonprocedural languages  


DocID: CACM-1457

the characteristics of various processing [languages] are  
implementation.  advantages of these programming languages  


DocID: CACM-2546

identification in the limit, extensible languages  
the use of grammatical inference for designing programming languages  


DocID: CACM-1923

high level [languages] command language  
level [languages] using basic input/output support  


DocID: CACM-1911

natural [languages] generative grammar, transformational  
languages is considered within the frame work  


DocID: CACM-1769

problem-oriented [languages] data communication,  
languages are particularly effective over the entire  


DocID: CACM-2941

programming [languages] types, modules,  
for mesa and similar programming [languages] are suggested.  


DocID: CACM-2940

corresponding constructs in other [languages]  a  
languages, programming methodology, proofs of correctness, types, verification  


DocID: CACM-0321

imposed by other compiling [languages] have finally  
parts of algol present in other compiler [languages] how  


DocID: CACM-2886

attribute grammars, semantics of programming [languages]  
use for the definition of programming languages  


DocID: CACM-1306

a class of unambiguous computer languages  
means of designing computer [languages] which would be completely  


DocID: CACM-2699

languages, set-theoretic [languages] data  


DocID: CACM-2252

languages with nested statement structure  
which applies especially to programming languages  


DocID: CACM-2198

data base management systems, programming [languages]  
programming [languages]  the problem of high level interrogation  


DocID: CACM-0249

specification [languages] for mechanical languages  


DocID: CACM-2003

languages, operating at different levels, on which the interaction  
criteria provide sufficient generality to extend the use of the two languages  


DocID: CACM-2842

the denotational semantics of programming languages  
and the underlying mathematical theory of computation  
of [computation] higher-order function, recursive definition, loop, gedanken  


DocID: CACM-1467

well as the use of new graphical [languages]  
future through the use of interactive graphical [languages]  


DocID: CACM-1469

the next 700 programming languages  
a family of unimplemented computing languages  


DocID: CACM-2652

programming [languages] tailored to particular  
design of programming [languages] language contraction,  


DocID: CACM-2684

to define abstract syntax and translations between [languages]  
of the syntax of programming [languages] has been  


DocID: CACM-1835

languages programming [languages] student programming  


DocID: CACM-2295

programming primitives, programming [languages]  
of programming [languages] data structures  


DocID: CACM-2939

languages, through the procedure or subroutine.  
programming [languages] data types, data abstractions,  


DocID: CACM-2148

programming primitives, programming [languages]  
of programming [languages] data structures  


DocID: CACM-2289

these algorithms exhibit a [computation] time that in  


DocID: CACM-2785

parallel [computation] parallel architecture  
glypnir is one of the earliest existing languages  


DocID: CACM-1309

use of two special [languages] extract and matran,  
a fundamental vehicle for accomplishing both manipulation and [computation]  


DocID: CACM-2707

series, and the substantial reduction in computation  
of macros can considerably shorten the computation  
problems, the [computation] of new terms in a well-known  


DocID: CACM-3085

computation order of matrix chain products  
this paper discusses the [computation] of matrix  
o n  algorithm to find an order of [computation] which  


DocID: CACM-2739

natural language, parsing, grammar, programming languages  


DocID: CACM-2580

computer composition, music theory, formal [languages] probabilistic grammars  


DocID: CACM-1727

avoiding the necessity of [computation] involving  
markov chains, an algorithm for the computation  


DocID: CACM-2263

greater [computation] effort needed for applying  
but usually less, [computation] time. 2  in general, the  


DocID: CACM-2129

recursive [computation] of certain derivatives-a  
recursive [computation] successive derivatives, error propagation  
recursive [computation] of successive derivatives of  e^x /x  


DocID: CACM-1484

standard programming [languages] for the description of  


DocID: CACM-2534

compilers, debugging, pl/i, programming languages  


DocID: CACM-1265

programming [languages] such as lisp and algol has been  


DocID: CACM-2341

most programming [languages]  


DocID: CACM-3166

four algorithms for the numerical computation  
specifically intended for automatic [computation]  our discussion is  


DocID: CACM-1216

no use is made of list-processing [languages]  
obtained by hand [computation]  a subset may be imbeded  


DocID: CACM-2326

languages, least fix points, recursive programs,  
fix point approach to the theory of computation  


DocID: CACM-2719

manipulation, programming [languages] analysis  


DocID: CACM-1395

of the family of string transformation languages  


DocID: CACM-1988

such as compiler-compilers or extendible [languages]  


DocID: CACM-1738

debugging, utility program, programming languages  


DocID: CACM-2138

programming [languages] implementation language,  


DocID: CACM-2061

context-free grammars, formal [languages] pushdown automata  


DocID: CACM-2906

in recent years, very high-level languages  


DocID: CACM-2340

a boolean matrix method for the computation  
method for the [computation] of linear precedence  


DocID: CACM-1708

efficiency of paged computation  
a note on the efficiency of a lisp [computation] in a paged machine  


DocID: CACM-2918

computation problems as well as to possess  
general purpose [computation]  results for in terleaved  


DocID: CACM-1536

dynamic [computation] of derivatives  
it is shown how wengert's procedure for computation  


DocID: CACM-1145

and the program is designed to avoid excessive computation  


DocID: CACM-2217



DocID: CACM-0990

constraint-type statements in programming languages  


DocID: CACM-2732

programming [languages] sequencing primitives, program  


DocID: CACM-1456

other list processing [languages] are ideally suited for  


DocID: CACM-1453

languages, including some sublanguage of algol.  


DocID: CACM-1397

people interested in programming [languages] designed  


DocID: CACM-1824

in special purpose [languages] such as snobol4 and  


DocID: CACM-1902

different [languages] including assembly language.  

