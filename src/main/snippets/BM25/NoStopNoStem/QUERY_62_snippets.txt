BM25_NoStopNoStem

Query
rests relating parallel complexity theory (both for primes algorithm cicruits).

Top 100 Results (123 millisecs)


DocID: CACM-2927

complexity of finding all the [primes] less than  
number [theory] linked list, preprocessing,  
computational [complexity] sieve, prime number generation,  


DocID: CACM-1967

an improved [algorithm] to produce complex [primes]  [algorithm] 401 $a1    
number [theory] prime numbers, complex numbers  


DocID: CACM-3037

primes between 2 and n.  the [algorithm] executes  
primes, algorithms, data structures  
as the [algorithm] presented by mairson [6];  


DocID: CACM-2120

an [algorithm] to produce complex [primes] csieve  [algorithm] 372 $a1    
primes, complex numbers  


DocID: CACM-2932

complexity of computations, algebraic [complexity]  
the framework for research in the [theory] of complexity  
complexity of computations  


DocID: CACM-2327

automata [theory] brain [theory] network [complexity]  
toward an automata [theory] of brains  
in which automata [theory] might evolve over the  


DocID: CACM-1961

algorithm, path search [algorithm] searching  
algorithm, graph [theory] circuit search  
a theoretically most efficient search [algorithm] is presented  


DocID: CACM-0935

calculating [primes] by means of gps  [algorithm]   


DocID: CACM-2685

parallel computing, multiprocessor computers,  
the [parallel] execution of do loops  
methods are developed for the [parallel] execution  


DocID: CACM-3156

graph [theory] [parallel] processing, algorithms,  
we present a [parallel] [algorithm] which uses n2 processors to find the connected  
computing connected components on [parallel] computers  


DocID: CACM-1856

linguistics, linguistic performance theory  
a simulation program and [theory] of language  
and capabilities for [relating] text to such  


DocID: CACM-2401

a [parallel] processing [algorithm] for shrinking  
counting binary patterns, shrinking, parallel  
any pattern, regardless of the [complexity] of  


DocID: CACM-2702

computational [complexity] context-free grammars,  
on the [complexity] of lr k  testing  
the [complexity] of the problem depends very strongly  


DocID: CACM-2227

documentation, program correctness, theory  
relating to general programming methodology are drawn.  
algorithm "find."  first, a informal description  


DocID: CACM-2195

global recognition, [parallel] processing, dynamic  
the method described is suitable for parallel  
state can be computed in [parallel] and the number  


DocID: CACM-1548

rests upon some conventions for the linkage of decision tables.  


DocID: CACM-2714

parallel processing, [parallel] merging, [parallel] binary insertion  
the previous best [parallel] merging [algorithm]  
merging with [parallel] processors  


DocID: CACM-2784

selection, computational [complexity] medians, tournaments, quantiles  
a new selection [algorithm] is presented which  


DocID: CACM-1266

considerations [relating] to purpose of fortran standardization  


DocID: CACM-2973

parallel computer, [parallel] sorting, [parallel] merge,  
sorting on a mesh-connected [parallel] computer  
the best previous [algorithm] takes time o n log  


DocID: CACM-2580

computer composition, music [theory] formal languages, probabilistic grammars  
theory plus additional heuristics.  fundamental to the  
to the layman.  it appears that full-blown music theory  


DocID: CACM-2342

operating systems, [parallel] processes  
interference between communicating [parallel] processes  
parallel processes have been examined by  


DocID: CACM-1806

presented.  although in [theory] the method always  
given and a critical review of [relating] literature is  
based on the modified method is given in algorithm  


DocID: CACM-2337

sorting, computational [complexity] computational combinatorics  
a sorting problem and its complexity  
algorithms is given.  one new [algorithm] for  


DocID: CACM-2346

information [theory] coding [theory] hu-tucker  
coding method [z]  [algorithm] a428   


DocID: CACM-3045

and [complexity] of both the parser and its table generator.  


DocID: CACM-2266

a highly [parallel] [algorithm] for approximating  
parallel numerical algorithms, real polynomials,  
is conceptually suitable for [parallel] computation,  


DocID: CACM-1262

procedure-oriented language statements to facilitate [parallel] processing  
in [parallel]  the statements are do together  
a range of [parallel] operation and partly to  


DocID: CACM-2110

algorithm known is described.  it is similar to both knuth's lr k  algorithm  
compilers, computational complexity  
an efficient context-free parsing algorithm  


DocID: CACM-1925

the solution of problems [relating] to contour  


DocID: CACM-2785

parallel computation, [parallel] architecture  
of the problems associated with [parallel] computer  
to specify the parallelism of his [algorithm] in terms of 64-word  


DocID: CACM-2220

algorithm  
theory, noiseless channel, sorting  
program.  two modifications of this algorithm  


DocID: CACM-3075

a [parallel] bucket-sort [algorithm] is presented  
fast [parallel] sorting algorithms  
parallel processing, sorting, algorithms, bucket sort  


DocID: CACM-1158

program structures for [parallel] processing  
constructs for organizing and explicating parallel  


DocID: CACM-2896

with proving such [parallel] programs correct  
a [parallel] program, dijkstra's on-the-fly garbage  
an exercise in proving [parallel] programs correct  


DocID: CACM-3055

is shown to have expected swap [complexity] 5/9n.  
by 1/4 of a swap.  the [algorithm] of meyer  


DocID: CACM-2837

concrete computational [complexity] upper bounds,  
bound given by the standard hadian-sobel algorithm  
algorithm, and extends kirkpatrick's method to a  


DocID: CACM-2700

parallel program, semaphore, verification  
halting.  thus correctness proofs of a parallel  
when proving that a [parallel] program has a  


DocID: CACM-1911

theory, syntax, coordination, sentence  
of transformational [theory]  to account for these phenomena  


DocID: CACM-2770

primes have full-period integer-coefficient  


DocID: CACM-3007

complexity of computations  corrigendum   


DocID: CACM-0950

parallel methods for integrating ordinary differential equations  
algorithms ought to be replaced by [algorithm] which  
computations of highly [parallel] computers as can be  


DocID: CACM-1309

reports, regardless of computational [complexity] or format  


DocID: CACM-1601

measurements are interpreted in a [parallel] processing  
parallel numerical methods for the solution of equations  
a [parallel] processing environment are developed and measurements  


DocID: CACM-2121

partitions,number theory  
partitions in natural order  [algorithm] 371 $a1    


DocID: CACM-1302

parallel signaling speeds for data transmission  


DocID: CACM-0320

both the sequential and [parallel] aspects of logic.  they  


DocID: CACM-1828

parallel accessing, [parallel] search, file search,  
which will maximize the amount of parallel  


DocID: CACM-0141

some thoughts on [parallel] processing  


DocID: CACM-2430

algorithm, path search [algorithm] searching  
algorithm, graph [theory] circuit search  
the elementary circuits of a graph [h]  [algorithm] a459   


DocID: CACM-3086

computational [complexity] computational models,  
the decision tree [complexity] of computing the  
on the [complexity] of computing the measure of u[ai, bi]  


DocID: CACM-2133

operations research, optimization [theory]  
algorithm for the assignment problem  
 rectangular matrices  [h]  [algorithm] 415   


DocID: CACM-1825

and if certain conditions [relating] these individual  
constructed for each part  using knuth's [algorithm]   


DocID: CACM-2795

 2  information [relating] conceptual to syntactic  


DocID: CACM-1840

prime numbers, factoring, number theory  
an efficient prime number generator  [algorithm] 357 [a1]   


DocID: CACM-0392

comment on a paper on [parallel] processing  


DocID: CACM-2416

primitive roots, number theory  
matrix transposition in place [f1]  [algorithm] a467   


DocID: CACM-2515

relations without [parallel] activities is presented.  a  
algorithm presented by a. c. fisher, j. s. liebman,  


DocID: CACM-2028

number [theory] diophantine equations  
greatest common divisor, euclidean [algorithm]  
and multipliers $a1   [algorithm] 386   


DocID: CACM-1887

a recursive relation, [relating] leading principal  


DocID: CACM-1948

computers in group [theory] a survey  
group [theory] coset enumeration, subgroup lattices,  
diverse range of problems in group [theory]  


DocID: CACM-2648

number [theory] package, trial division, multiprecise  
a design for a number [theory] package  
a number [theory] package is described which uses  


DocID: CACM-2895

formal specifications,program correctness, parallel  
of communicating [parallel] processes is described.  


DocID: CACM-1841

prime numbers, number [theory] sorting  
treesort principle  [algorithm] 356 [a1]   


DocID: CACM-2842

environment, store, continuation, theory  
theory of programming language semantics developed  
and the underlying mathematical [theory] of computation  


DocID: CACM-3059

multiprogramming, [parallel] processing, queueing  
models for [parallel] processing within programs:  
approximate queueing models for internal parallel  


DocID: CACM-1795

optimal code for serial and [parallel] computation  


DocID: CACM-2997

computational [complexity] convex hull, optimal algorithms,  
since any convex hull [algorithm] requires at  
least o n log n  operations, the time [complexity] of the  


DocID: CACM-2182

interrupts, supervisors, monitors, debugging, parallel  


DocID: CACM-1468

on labeling techniques using [parallel] processing  
and the [parallel] processing simulator mentioned  
this to bubble chamber pictures.  the [parallel] processing  


DocID: CACM-2898

parallel programming, descriptive programming,  


DocID: CACM-2323

toward a general [theory] of special functions  
to differential equations.  such a [theory] is  
then the prospects for a general [theory] of functions  


DocID: CACM-2865

of properties of [parallel] programs is presented.  
which are added to a [parallel] program as  
verifying properties of [parallel] programs: an axiomatic approach  


DocID: CACM-2557

minimization, [parallel] machine, time minimization  
as well as [parallel] computers is discussed.  algorithms  


DocID: CACM-1934

arithmetic expression, compiler design, graph [theory]  
an [algorithm] to solve this problem is presented.  
to a specific problem under the [theory] of graphs.  


DocID: CACM-2743

merge sorting, computational [complexity] data  


DocID: CACM-1136

beginnings of a [theory] of information handling*  


DocID: CACM-2703

grammars, computational [complexity] exponential  
the intrinsically exponential [complexity] of  
version of knuth's circularity testing algorithm  


DocID: CACM-2931

through the developments in [complexity] [theory]  
we have a unified [theory]  
computability [theory]  programming languages offer  


DocID: CACM-2828

visible surface [algorithm] in which the computation  
access by the visible surface [algorithm]  finally,  
techniques are possible.  first, the range of complexity  


DocID: CACM-2616

semantics, [theory] of programming, systems analysis  
in practice.  extensions to the [theory] of computation  


DocID: CACM-2936

and second, its worst-case [complexity] is o   
paper a new event scheduling [algorithm] is presented  
complexity showed it to be nearly independent of n.  


DocID: CACM-2290

predominator, immediate predominator, graph [theory]  
immediate predominators in a directed graph [h]  [algorithm] a430   


DocID: CACM-1101

theory in the computer curriculum  


DocID: CACM-2598

theory, noiseless channel, sorting  
extending the information [theory] approach to converting  
this paper modifies an earlier [algorithm] for  


DocID: CACM-1048

fields as electrostatic  field [theory] heat  
and ideal fluid flow, and stress concentration theory  


DocID: CACM-3162

of the boyer-moore string matching algorithm  
computational [complexity] linear time, worst case, string matching, periodicity  
it is shown how to modify the boyer-moore string matching [algorithm] so that  


DocID: CACM-2938

with increasing [complexity] of reasoning  
the [complexity] of reasoning about concurrency and execution  


DocID: CACM-2545

patterns, snobol4, pattern [theory] parsing, pattern matching,  
a [theory] of discrete patterns and their implementation in snobol4  


DocID: CACM-3073

program structures, [parallel] programming,  
basic primitives of programming and that parallel  


DocID: CACM-1834

axiomatic method, [theory] of programming, proofs of  


DocID: CACM-1382

three matters [relating] to the theme of the  


DocID: CACM-2289

graph [theory] cellular logic-in-memory arrays,  
parallel processing, special purpose computers,  
achieved by virtue of the possibilities for parallel  


DocID: CACM-2200

division [algorithm] complement arithmetic, complement  
the division [algorithm] theorem is expressed  


DocID: CACM-2175

parallel processing, cache, arithmetic expressions,  
parallel exceeds the number of available processors,  
in serials, in [parallel] or in a combination of these  


DocID: CACM-2476

language [theory] context-free grammars  


DocID: CACM-2851

parallel program, correctness, verification,  
formal verification of [parallel] programs  
two formal models for [parallel] computation  


DocID: CACM-1569

in a pl/i procedure whose structure and statements parallel  


DocID: CACM-2672

composition, music theory  


DocID: CACM-2453

develops a heuristic [algorithm] that converts  
information [theory] applied to the conversion  
using ideas from information [theory] this paper  

