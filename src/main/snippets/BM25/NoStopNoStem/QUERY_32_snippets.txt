BM25_NoStopNoStem

Query
id like to find articles describing graph anothers taught are based once eigenvalue decomposition (or seminar valve decomposition) of transparency matrix for the graph.  ibm efficiency inserted in any heuristic
anothers for graph coloring and graph isomorphism using this method.

Top 100 Results (671 millisecs)


DocID: CACM-3139

np-complete, [graph] structure, balancing, graph  
important part of [heuristic] procedures to [find] maximal cliques in general  
upon the comparison of the degrees and structure of a [graph]  a method  


DocID: CACM-2177

cycle set, [graph] lobe, lobe decomposition  
graph.  the [graph] may be represented either  i  as an  
graph, separable, spanning tree, web grammar  


DocID: CACM-2290

directed [graph] shortest path, articulation,  
predominator, immediate predominator, [graph] theory,  
immediate predominators in a directed [graph] [h]  algorithm a430   


DocID: CACM-2630

graph, network, shortest path, algorithm  
on computing sets of shortest paths in a graph  
in a directed [graph]  these algorithms generalize the floyd  


DocID: CACM-2172

plot, [graph] line printer plot  
graph plotter [j6]  algorithm 412   


DocID: CACM-2934

graph, network, shortest path, algorithm, ranking  
comment on computing the k shortest paths in a graph  


DocID: CACM-2368

graph algorithms, [graph] processing, shannon switching  
games, game playing, [graph] theory, positional  
an implemented [graph] algorithm for winning shannon switching games  


DocID: CACM-2430

algorithm, [graph] theory, circuit search  
the elementary circuits of a [graph] [h]  algorithm a459   


DocID: CACM-2752

basic cycle, cycle, graph  
generation of all the cycles of a [graph] from  


DocID: CACM-2490

graphs,analysis of algorithms, [graph] manipulation  
a [graph] into connected components, biconnected  
of a [graph] into simple paths is iterative  


DocID: CACM-1961

circuits of a [graph]  the algorithm can be easily modified to [find] all  
an efficient search algorithm to [find] the elementary circuits of a graph  
algorithm, [graph] theory, circuit search  


DocID: CACM-2052

tree, undirected linear graph  
allocation, conflict [matrix] connected component, scheduling, spanning  
conflicts in scheduling can be treated as defining an undirected linear graph  


DocID: CACM-2619

graph [coloring] conditions for the existence  
of a [graph]  the preconditions correspond to the unavailability  
of a coloration of a [graph] is the required necessary  


DocID: CACM-1481

graph plotter  algorithm 278 [j6]   


DocID: CACM-2461

graph plotter  algorithm r412   


DocID: CACM-1847

fundamental cycle set, [graph] algorithm, cycle, spanning tree  
a fast [method] is presented for finding a fundamental  
n^g where g depends on the type of [graph] involved.  


DocID: CACM-2059

colored [graph] language extended algol,  
graph operations such as node and/or link deletion or insertion, union,  
a language for the representation of [graph] is described, and the formulation of  


DocID: CACM-2980

is [based] on definitions of [graph] properties which are  
of the region adjacency [graph]  the scheme  
editing is equivalent to fast [graph] operations.  a number of examples are shown.  


DocID: CACM-2015

merger algorithm, minimum cost inverse-arborescence, [graph] theory  
inverse-arborescence of that [graph]  the validity of the technique is  
given a precedence grammar. a [graph] formulation is used for the problem of  


DocID: CACM-2289

matrix of a [graph] is easily mapped onto an array;  
graph theory, cellular logic-in-memory arrays,  
cellular arrays for the solution of [graph] problems  


DocID: CACM-2484

a general [method] for constructing such a tree or a graph  
storage allocation, tree, graph  
in this general construction [method] namely, a set of  


DocID: CACM-2790

the elementary circuits of a [graph]  algorithm r459   


DocID: CACM-1983

graph, tree, spanning tree  


DocID: CACM-2763

graph, basic cycles,fundamental cycle,  
spanning tree, vertex adjacency matrix  


DocID: CACM-2161

an algorithm for the blocks and cutnodes of a [graph]  corrigendum   


DocID: CACM-3156

graph theory, parallel processing, algorithms,  
the algorithm can be used to [find] the transitive closure  
of a symmetric boolean [matrix]  we assume that the processors have  


DocID: CACM-1822

shortest path, tree, network, directed graph  


DocID: CACM-2178

graph processing, programming language, formal semantics,  
directed [graph] lisp, network, data structure,  
a language extension for [graph] processing and its formal semantics  


DocID: CACM-2883

path, [heuristic] search methods, problem solving  
time.  moreover, if [heuristic] search methods  
are discussed, showing that the [graph] search  


DocID: CACM-2444

finding all cliques of an undirected [graph]  algorithm a457   


DocID: CACM-1504

given the adjacency [matrix] of the [graph] the algorithm  
of cycles for an undirected linear graph  


DocID: CACM-2877

possibly "reach" each node of the control flow graph  
"live" on each edge of the [graph]  the procedure uses  


DocID: CACM-1563

justification for the [method] is given.  
a [method] for finding hamilton paths and knight's tours  
problem of finding a hamilton path in a [graph]  a [graph]theoretic  


DocID: CACM-2695

eigenvalues, [graph] bandwidth, sparse matrix  
tridiagonal [matrix] permutation, algorithm,  
tridiagonalizing a [matrix] by similarity transformations  


DocID: CACM-3018

between this edge-clique-cover problem and the [graph] coloring  
keyword conflicts and described a heuristic  
problem in connection with this [method]  


DocID: CACM-2155

data structures, [graph] implementation,  
for [describing] the semantics of data structures.  
this is [based] on directed graphs with named edges and  


DocID: CACM-2701

analysis, information propagation, flow [graph] reducibility,  
for a [graph] of e edges, the algorithm has a  


DocID: CACM-2769

matrix, directed [graph] digraph, boolean  
matrix, binary relation  
by a boolean [matrix] the algorithm is similar to warshall's  


DocID: CACM-3040

networks, constraint satisfaction, [graph] [coloring]  
of backtrack tree search [efficiency]  an algorithm  


DocID: CACM-1432

of alphanumeric information on a digital graph  
or unit number. this [method] was used to control output  


DocID: CACM-1935

binary pattern, file examination, [graph] theory, information  
the search [method] described is binary in nature  
probabilistic [method] random sequencing, search techniques, tree structures  


DocID: CACM-1947

compilers, data flow analysis, dominance, [efficiency]  
fortran,  [graph] theory, loop structure, machine  
to transforming the program to improve object time [efficiency]  


DocID: CACM-2568

nondirected network, [graph] subgraph, strongly  
a [graph] formulation of a school scheduling algorithm  


DocID: CACM-2189

permutation, [graph] theory, scheduling, combinatorial algebra  
is described.  in a nonoriented complete [graph] with  


DocID: CACM-1934

arithmetic expression, compiler design, [graph] theory,  


DocID: CACM-3100

matching, interference, [graph] matching, learning,  
a [method] for inducing knowledge by abstraction  
the proposed [method] interference matching, induces abstractions  


DocID: CACM-1828

can be represented as a [graph]  an example of such  


DocID: CACM-3172

polyhedral obstacles, [graph] searching, growing objects  


DocID: CACM-2125

a [method] for extracting a smooth polygonal  
the ordered sequence of contour points and the connection [graph] of  


DocID: CACM-3164

path [matrix] representation and the other uses a list with an  
maintains a [graph] in an acyclic state.  when a request creates a cycle,  


DocID: CACM-3125

information or restrictions on the shape of the program [graph]  


DocID: CACM-3124

between the definitional systems are given and illustrated through graph  


DocID: CACM-1925

geometrical properties, [graph] of contour  


DocID: CACM-1456

storage and retrieval of aspects of meaning in directed [graph] structures  


DocID: CACM-2195

edge detection,optimal detection, [heuristic] methods,  
programming, interaction [graph] secondary optimization problem  
the [method] described is suitable for parallel  


DocID: CACM-2920

the bipartite [graph] representation of this game may  


DocID: CACM-2986

matrix, directed [graph] wirth-weber precedence  


DocID: CACM-2923

flow [graph] structured programming, escapes, exits,  
this paper proposes a simple general method  


DocID: CACM-3008

arrays, [graph] embedding, linear lists,  


DocID: CACM-2925

describing a human head is included.  
toroidal [graph]  a new fast algorithm for finding such  


DocID: CACM-1905

the simplex [method] of linear programming using lu decomposition  
simplex [method] for linear programming are based  
simplex [method] linear programming, lu [decomposition]  


DocID: CACM-1839

singular values, [matrix] [decomposition]  
matrix  algorithm 358 [f1, 4,5]   
singular value [decomposition] of a complex  


DocID: CACM-2408

eigenvalue-eigenvector [decomposition]  the other method  
eigenvector[eigenvalue] decomposition  
biharmonic, direct [method] block iterative,  


DocID: CACM-1899

simplex [method] linear programming, lu [decomposition]  
simplex [method] procedure employing lu [decomposition]  algorithm 350 [h]   


DocID: CACM-2558

one subprogram from another's malfunctioning  


DocID: CACM-1529

decomposition programming an analysis of [matrix] substructure  
primal-simplex solution without [decomposition]  
to compare the primal and primal-dual decomposition  


DocID: CACM-1791

matrix modifier, [matrix] perturbation  
matrix [decomposition] [matrix] factors,  


DocID: CACM-1727

program correspondence, program [graph] one-entry  


DocID: CACM-2697

proved that the computed lu [decomposition] converges  
proved that the diagonals of the lu decomposition  
entire lu [decomposition] takes k words of storage,  


DocID: CACM-2856

programs have been [based] on [decomposition]  at any  
be created.  using this approach, the [efficiency] of creating  


DocID: CACM-2247

unconventional [decomposition] if implemented with  
decomposition are described.  it is shown that the  


DocID: CACM-2204

from coding-is usually [taught] by examples  
the [decomposition] of tasks into subtasks and of data  


DocID: CACM-3138

updating an orthogonal [decomposition] of a [matrix] of column  or row  vectors.  
a mathematical programming updating [method] using modified  
of the revised simplex [method]  the algorithm is a general purpose  


DocID: CACM-1487

decomposition rules.  the fundamental technical  
on the basis of [decomposition] rules which are triggered  


DocID: CACM-3016

the error inherent in the decomposition  


DocID: CACM-1145

of directed line graphs for [isomorphism]  
isomorphism tester-incorporates a variety of processes  
git-a [heuristic] program for testing pairs  


DocID: CACM-1744

that uses gaussian lu [decomposition] with row  


DocID: CACM-1029

to the [method] is the [decomposition] of the given  


DocID: CACM-2275

by using singular value [decomposition]  3  constrain  


DocID: CACM-3059

is developed by network [decomposition]  the  


DocID: CACM-1415

the [decomposition] of long complex english sentences  


DocID: CACM-3033

solutions.  the [heuristic] search [method] introduced  
decision tree, [heuristic] search, and/or graphs,  
technique uses a good [heuristic] to direct  


DocID: CACM-1429

matrix reduction using the hungarian method  
the application of kuhn's hungarian method  
gotlieb's [method] for timetable generation is described.  


DocID: CACM-1290

upon solutions to the problems of transparency  
concepts of [transparency] in which the normal character  
complete character [transparency]  it does not cover  


DocID: CACM-3085

matrix multiplication, [matrix] chain product  
approximate algorithm, [heuristic] algorithm,  
computation order of [matrix] chain products  


DocID: CACM-2940

decomposition, program specifications, programming  


DocID: CACM-3153

of processor time devoted to each class.  applying a decomposition  


DocID: CACM-2523

based on topology and size.  the [method] has  
a region [coloring] technique for scene analysis  
a [method] of converting a picture into a "cartoon"  


DocID: CACM-3190

correction to economies of scale and the [ibm] system/360  
on page 439, a "typical" instruction mix [id] discussed and the timing computed  


DocID: CACM-1401

the newton-raphson-kantorovich [method]  
several [eigenvalue] problems for systems of  


DocID: CACM-0558

selection of the pivot row in [matrix] inversion  
of any non-dense [matrix]  the procedures described  
ibm 7090 computer for nine months.  substantial computer  


DocID: CACM-2453

previously published [heuristic] algorithms.  compared  
develops a [heuristic] algorithm that converts  
time.  the [method] is applicable to any limited entry  


DocID: CACM-1172

decision tables are useful for [describing] a  
set of complex decision rules [based] on given sets  
two such algorithms, [based] on work done by m. s.  


DocID: CACM-1698

based on the properties of this community  


DocID: CACM-1166

to assist in translating [ibm] 7090 symbolic assembly  
language programs to [ibm] 7040 machine language programs.  
this set, [inserted] at the beginning of the  


DocID: CACM-1930

needed for which moderate quality and efficiency  
portable 8-line fortran program is provided which based  


DocID: CACM-2972

a [method] for [describing] and structuring programs  
are described in the paper, the [method] is also  
is presented.  the [method] formally represents a program  


DocID: CACM-2213

eigenvalues, [matrix] roots, pencil roots  
roots of [matrix] pencils: the generalized  
eigenvalue problem [f2]  algorithm 405   


DocID: CACM-2771



DocID: CACM-1786

introduced is a hash coding [method] [based] on  
quadratic search, this [method] is faster than random  
or logical operations.  this new [method] allows the  

